name: Generate MikroTik RSC Files for scripts

on:
  schedule:
    - cron: "05 0 * * *"    # ежедневно в 00:05
  workflow_dispatch:

permissions:
  contents: write

env:
  RESOURCES: "autodesk, \
    apple-tvplus, \
    akamai, \
    cloudflare, \
    dell, \
    cisco, \
    openai, \
    xai, \
    tidal, \
    google, \
    google-gemini, \
    tmdb, \
    spotify, \
    tiktok, \
    atlassian, \
    ubiquiti, \
    microsoft-dev, \
    github, \
    microsoft, \
    riot, \
    steam, \
    sony, \
    speedtest, \
    oracle, \
    samsung, \
    lg, \
    slack, \
    discord, \
    notion, \
    supercell, \
    telegram, \
    xbox, \
    kinopub, \
    rutracker, \
    linkedin, \
    adguard, \
    whatsapp, \
    twitter, \
    youtube, \
    facebook, \
    instagram, \
    meta, \
    oculus, \
    intel, \
    netflix, \
    pornhub, \
    xhamster, \
    adobe, \
    twitch"

  JSON_URL_TEMPLATE: https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/sing/geo/geosite/{resource}.json
  MAX_ENTRIES_PER_FILE: 150

jobs:
  generate-rsc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Process each resource
        run: |
          set -e
          IFS=',' read -ra resource_array <<< "${{ env.RESOURCES }}"
          JSON_URL_TEMPLATE="${{ env.JSON_URL_TEMPLATE }}"
          MAX_ENTRIES_PER_FILE="${{ env.MAX_ENTRIES_PER_FILE }}"

          mkdir -p for_scripts

          for resource in "${resource_array[@]}"; do
              resource=$(echo "$resource" | xargs)
              echo "Processing resource: $resource"
              json_url="${JSON_URL_TEMPLATE//\{resource\}/$resource}"
              
              if ! curl -s -f "$json_url" > "input_$resource.json"; then
                  echo "Failed to fetch JSON for $resource, skipping..."
                  continue
              fi

              # Initialize arrays for domains, suffixes, and regex
              domains=$(jq -r '
                .rules[]
                | if (.domain | type == "string") then [.domain]
                  elif (.domain | type == "array") then .domain
                  else [] end
                | .[]
              ' "input_$resource.json" | sort -u)

              suffixes=$(jq -r '
                .rules[]
                | if (.domain_suffix | type == "string") then [.domain_suffix]
                  elif (.domain_suffix | type == "array") then .domain_suffix
                  else [] end
                | .[]
              ' "input_$resource.json" | sort -u)

              regex_list=$(jq -r '
                .rules[]
                | if (.domain_regex | type == "string") then [.domain_regex]
                  elif (.domain_regex | type == "array") then .domain_regex
                  else [] end
                | .[]
              ' "input_$resource.json" | sort -u)

              # Blacklist of TLDs to exclude
              excluded_tlds="cv|dj|dm|im|kg|ki|li|ml|ms|mv|ne|nr|sm|ad|as|bf|bj|bt|cd|cf|ci|ao|bw|ck|ls|mz|vi|zm|bn|bz|cy|et|fj|gi|kh|mm|na|np|pg|sb|sl|vc|mg|ac|af|ag|ai|bi|bs|cg|cm|cu|dz|ga|gd|gl|gm|gs|gy|ht|je|lc|mp|mu|mw|nu|pn|re|rw|sc|sr|st|sx|sy|tf|tj|tl|tt|vg|vu|wf|yt|do|ec|eg|gh|hn|jm|kw|lb|mt|om|py|tr|tw|se|ae|al|am|at|bg|ch|id|cn|ve|uk|za|zw|ar|au|bd|br|il|ke|nz|th|tz|de|es|fr|gr|hr|hu|ie|is|it|ng|nl|pl|ro|rs|sa|ua|jo|uz|tm|az|ba|bh|bo|by|ca|qa|vn|uy|ug|tn|sv|sk|si|sg|ee|sn|cl|pt|pr|pk|ph|pe|pa|no|ni|my|mx|mn|mk|md|ma|ly|lv|lu|lt|lk|la|kz|kr|jp|iq|in|hk|gt|ge|fi|cr|cz|dk"

              # Filter domains and suffixes, excluding rare TLDs and empty lines
              filtered_domains=$(echo "$domains" | grep -Ev "\.($excluded_tlds)$" | grep -v '^$' || true)
              filtered_suffixes=$(echo "$suffixes" | grep -Ev "\.($excluded_tlds)$" | grep -v '^$' || true)
              filtered_regex_list=$(echo "$regex_list" | grep -v '^$' || true)

              # Combine all entries into one array
              all_entries=()
              while IFS= read -r suffix; do
                  all_entries+=("suffix:$suffix")
              done <<< "$filtered_suffixes"
              while IFS= read -r domain; do
                  all_entries+=("domain:$domain")
              done <<< "$filtered_domains"
              while IFS= read -r regex; do
                  escaped_regex=$(echo "$regex" | sed -E '
                    s/\\/\\\\\\\\/g;      # Escape backslashes first
                    s/\$/\\$/g;           # $ → \$
                    s/"/\\"/g;            # " → \"
                    s/ /\\_/g;            # space → \_
                    s/\?/\\?/g;           # ? → \?
                  ')
                  all_entries+=("regex:$escaped_regex")
              done <<< "$filtered_regex_list"

              # Split entries into chunks of MAX_ENTRIES_PER_FILE
              entry_count=${#all_entries[@]}
              if [ $entry_count -eq 0 ]; then
                  echo "No valid entries for $resource, skipping..."
                  continue
              fi

              # Check if entries fit in one file
              if [ $entry_count -le $MAX_ENTRIES_PER_FILE ]; then
                  output_file="for_scripts/${resource}.rsc"
                  echo ":global AddressList" > "$output_file"
                  echo ":global ForwardTo" >> "$output_file"
                  echo "/ip dns static" >> "$output_file"
                  for entry in "${all_entries[@]}"; do
                      type=$(echo "$entry" | cut -d':' -f1)
                      value=$(echo "$entry" | cut -d':' -f2-)
                      if [ "$type" = "domain" ]; then
                          echo ":if ([:len [/ip dns static find name=\"$value\"]] = 0) do={ add address-list=\$AddressList forward-to=\$ForwardTo comment=\"$resource\" type=FWD name=\"$value\" }" >> "$output_file"
                      elif [ "$type" = "suffix" ]; then
                          echo ":if ([:len [/ip dns static find name=\"$value\"]] = 0) do={ add address-list=\$AddressList forward-to=\$ForwardTo comment=\"$resource\" match-subdomain=yes type=FWD name=\"$value\" }" >> "$output_file"
                      elif [ "$type" = "regex" ]; then
                          echo ":if ([:len [/ip dns static find regexp=\"$value\"]] = 0) do={ add address-list=\$AddressList forward-to=\$ForwardTo comment=\"$resource\" type=FWD regexp=\"$value\" }" >> "$output_file"
                      fi
                  done
              else
                  # Split into multiple files
                  part=1
                  entry_index=0
                  while [ $entry_index -lt $entry_count ]; do
                      output_file="for_scripts/${resource}_part${part}.rsc"
                      echo ":global AddressList" > "$output_file"
                      echo ":global ForwardTo" >> "$output_file"
                      echo "/ip dns static" >> "$output_file"
                      for ((i=0; i<MAX_ENTRIES_PER_FILE && entry_index<entry_count; i++, entry_index++)); do
                          entry=${all_entries[$entry_index]}
                          type=$(echo "$entry" | cut -d':' -f1)
                          value=$(echo "$entry" | cut -d':' -f2-)
                          if [ "$type" = "suffix" ]; then
                              echo ":if ([:len [/ip dns static find name=\"$value\"]] = 0) do={ add address-list=\$AddressList forward-to=\$ForwardTo comment=\"$resource\" match-subdomain=yes type=FWD name=\"$value\" }" >> "$output_file"
                          elif [ "$type" = "domain" ]; then
                              echo ":if ([:len [/ip dns static find name=\"$value\"]] = 0) do={ add address-list=\$AddressList forward-to=\$ForwardTo comment=\"$resource\" type=FWD name=\"$value\" }" >> "$output_file"
                          elif [ "$type" = "regex" ]; then
                              echo ":if ([:len [/ip dns static find regexp=\"$value\"]] = 0) do={ add address-list=\$AddressList forward-to=\$ForwardTo comment=\"$resource\" type=FWD regexp=\"$value\" }" >> "$output_file"
                          fi
                      done
                      part=$((part + 1))
                  done
              fi
          done

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add for_scripts/*.rsc
          git commit -m "Update RSC files for ${{ env.RESOURCES }}" || exit 0
          git push