name: Generate MikroTik RSC Files

on:
  workflow_dispatch:
  push:
    branches: [main]

permissions:
  contents: write

env:
  RESOURCES: openai,youtube,facebook,intel
  FORWARD_TO: Google
  ADDRESS_LIST: BlackList
  JSON_URL_TEMPLATE: https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/sing/geo/geosite/{resource}.json

jobs:
  generate-rsc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Process each resource
        run: |
          set -e
          IFS=',' read -ra resource_array <<< "${{ env.RESOURCES }}"
          
          FORWARD_TO="${{ env.FORWARD_TO }}"
          ADDRESS_LIST="${{ env.ADDRESS_LIST }}"
          JSON_URL_TEMPLATE="${{ env.JSON_URL_TEMPLATE }}"
          
          for resource in "${resource_array[@]}"; do
            echo "Processing resource: $resource"
            json_url="${JSON_URL_TEMPLATE//\{resource\}/$resource}"
            
            mkdir -p "$resource"
            
            if ! curl -s -f "$json_url" > "input_$resource.json"; then
              echo "Failed to fetch JSON for $resource, skipping..."
              continue
            fi
            
            # Determine address list part
            if [ "$ADDRESS_LIST" = "false" ]; then
              ADDR_ARG=""
              LIST_SUFFIX="NoList"
            else
              ADDR_ARG=" address-list=$ADDRESS_LIST"
              LIST_SUFFIX="$ADDRESS_LIST"
            fi
            
            output_file="$resource/FWD_${resource}_${FORWARD_TO}_${LIST_SUFFIX}.rsc"
            # Always create the file with header (so file exists even if no entries)
            echo "/ip dns static" > "$output_file"
            
            # domain (match-subdomain=no)
            domains=$(jq -r '
              .rules[]
              | if (.domain | type == "string") then [.domain]
                elif (.domain | type == "array") then .domain
                else [] end
              | .[]
            ' "input_$resource.json" | sort -u)
            if [ -n "$domains" ]; then
              echo "$domains" | while read -r domain; do
                echo "add$ADDR_ARG forward-to=$FORWARD_TO comment=$resource type=FWD name=$domain" >> "$output_file"
              done
            fi


            # domain_suffix (match-subdomain=yes)
            suffixes=$(jq -r '
              .rules[]
              | if (.domain_suffix | type == "string") then [.domain_suffix]
                elif (.domain_suffix | type == "array") then .domain_suffix
                else [] end
              | .[]
            ' "input_$resource.json" | sort -u)
            if [ -n "$suffixes" ]; then
              echo "$suffixes" | while read -r domain_suffix; do
                echo "add$ADDR_ARG forward-to=$FORWARD_TO comment=$resource match-subdomain=yes type=FWD name=$domain_suffix" >> "$output_file"
              done
            fi


            # domain_regex (handle both string and array)
            regex_list=$(jq -r '
              .rules[]
              | if (.domain_regex | type == "string") then [.domain_regex]
                elif (.domain_regex | type == "array") then .domain_regex
                else [] end
              | .[]
            ' "input_$resource.json" | sort -u)
            if [ -n "$regex_list" ]; then
              echo "$regex_list" | while read -r regex; do
                escaped_regex=$(echo "$regex" | sed -E 's/\\/\\\\\\\\/g; s/([.$?"])/\\\1/g')
                echo "add$ADDR_ARG forward-to=$FORWARD_TO comment=$resource type=FWD regexp=\"$escaped_regex\"" >> "$output_file"
              done
            fi

          done

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add */FWD_*.rsc
          git commit -m "Update RSC files for ${{ env.RESOURCES }}" || exit 0
          git push
