name: Generate MikroTik RSC Files

on:
  workflow_dispatch:
  push:
    branches: [main]

permissions:
  contents: write

env:
  RESOURCES: openai,youtube,facebook,instagram,meta,oculus,intel,netflix,adobe,twitch
  FORWARD_TO: Google,CloudFlare
  ADDRESS_LIST: BlackList
  JSON_URL_TEMPLATE: https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/sing/geo/geosite/{resource}.json

jobs:
  generate-rsc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Process each resource
        run: |
          set -e
          IFS=',' read -ra resource_array <<< "${{ env.RESOURCES }}"
          IFS=',' read -ra forward_array <<< "${{ env.FORWARD_TO }}"

          ADDRESS_LIST="${{ env.ADDRESS_LIST }}"
          JSON_URL_TEMPLATE="${{ env.JSON_URL_TEMPLATE }}"

          for resource in "${resource_array[@]}"; do
              echo "Processing resource: $resource"
              json_url="${JSON_URL_TEMPLATE//\{resource\}/$resource}"
              
              mkdir -p "$resource"
              
              if ! curl -s -f "$json_url" > "input_$resource.json"; then
                  echo "Failed to fetch JSON for $resource, skipping..."
                  continue
              fi

              for TO in "${forward_array[@]}"; do
                  if [ "$ADDRESS_LIST" = "false" ]; then
                      ADDR_ARG=""
                      LIST_SUFFIX="NoList"
                  else
                      ADDR_ARG=" address-list=$ADDRESS_LIST"
                      LIST_SUFFIX="$ADDRESS_LIST"
                  fi
                  
                  output_file="$resource/FWD_${resource}_${TO}_${LIST_SUFFIX}.rsc"
                  # Перезаписываем файл с заголовком
                  echo "/ip dns static" > "$output_file"

                # domain (match-subdomain=no)
                domains=$(jq -r '
                  .rules[]
                  | if (.domain | type == "string") then [.domain]
                    elif (.domain | type == "array") then .domain
                    else [] end
                  | .[]
                ' "input_$resource.json" | sort -u)

                # Чёрный список стран, которые хотим исключить
                excluded_tlds="mg|ac|af|ag|ai|bi|bs|cg|cm|cu|dz|ga|gd|gl|gm|gs|gy|ht|je|lc|mp|mu|mw|nu|pn|re|rw|sc|sr|st|sx|sy|tf|tj|tl|tt|vg|vu|wf|yt|do|ec|eg|gh|hn|jm|kw|lb|mt|om|py|tr|tw|se|ae|al|am|at|bg|ch|co|id|cn|ve|uk|za|zw|ar|au|bd|br|il|ke|nz|th|tz|de|es|fr|gr|hr|hu|ie|is|it|ng|nl|pl|ro|rs|sa|ua|jo|uz|tm|az|ba|bh|bo|by|ca|cat|qa|vn|uy|ug|tn|sv|soy|sk|si|sg|ee|sn|cl|pt|pr|pk|ph|pe|pa|no|ni|my|mx|mn|mk|me|md|ma|ly|lv|lu|lt|lk|la|kz|kr|jp|iq|in|hk|gt|ge|fi|cr|cz|dk"

                # Фильтруем, исключая редкие TLD
                filtered_domains=$(echo "$domains" | grep -Ev "\.($excluded_tlds)$")

                if [ -n "$filtered_domains" ]; then
                  echo "$filtered_domains" | while read -r domain; do
                    echo "add$ADDR_ARG forward-to=$FORWARD_TO comment=$resource type=FWD name=$domain" >> "$output_file"
                  done
                fi

                # domain_suffix (match-subdomain=yes)
                suffixes=$(jq -r '
                  .rules[]
                  | if (.domain_suffix | type == "string") then [.domain_suffix]
                    elif (.domain_suffix | type == "array") then .domain_suffix
                    else [] end
                  | .[]
                ' "input_$resource.json" | sort -u)
              
                # Чёрный список стран, которые хотим исключить
                excluded_tlds="mg|ac|af|ag|ai|bi|bs|cg|cm|cu|dz|ga|gd|gl|gm|gs|gy|ht|je|lc|mp|mu|mw|nu|pn|re|rw|sc|sr|st|sx|sy|tf|tj|tl|tt|vg|vu|wf|yt|do|ec|eg|gh|hn|jm|kw|lb|mt|om|py|tr|tw|se|ae|al|am|at|bg|ch|co|id|cn|ve|uk|za|zw|ar|au|bd|br|il|ke|nz|th|tz|de|es|fr|gr|hr|hu|ie|is|it|ng|nl|pl|ro|rs|sa|ua|jo|uz|tm|az|ba|bh|bo|by|ca|cat|qa|vn|uy|ug|tn|sv|soy|sk|si|sg|ee|sn|cl|pt|pr|pk|ph|pe|pa|no|ni|my|mx|mn|mk|me|md|ma|ly|lv|lu|lt|lk|la|kz|kr|jp|iq|in|hk|gt|ge|fi|cr|cz|dk"

                # Фильтруем, исключая редкие TLD
                filtered_suffixes=$(echo "$suffixes" | grep -Ev "\.($excluded_tlds)$")

                if [ -n "$filtered_suffixes" ]; then
                  echo "$filtered_suffixes" | while read -r domain_suffix; do
                    echo "add$ADDR_ARG forward-to=$FORWARD_TO comment=$resource match-subdomain=yes type=FWD name=$domain_suffix" >> "$output_file"
                  done
                fi


                # domain_regex (handle both string and array)
                regex_list=$(jq -r '
                  .rules[]
                  | if (.domain_regex | type == "string") then [.domain_regex]
                    elif (.domain_regex | type == "array") then .domain_regex
                    else [] end
                  | .[]
                ' "input_$resource.json" | sort -u)
                if [ -n "$regex_list" ]; then
                  echo "$regex_list" | while read -r regex; do
                    escaped_regex=$(echo "$regex" | sed -E '
                      s/\\/\\\\\\\\/g;      # сначала экранируем все обратные слэши
                      s/\$/\\$/g;       # $ → \$
                      s/"/\\"/g;        # " → \"
                      s/ /\\_/g;        # пробел → \_
                      s/\?/\\?/g;       # ? → \?
                    ')
                    echo "add$ADDR_ARG forward-to=$FORWARD_TO comment=$resource type=FWD regexp=\"$escaped_regex\"" >> "$output_file"
                  done
                fi
            done
          done

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add */FWD_*.rsc
          git commit -m "Update RSC files for ${{ env.RESOURCES }}" || exit 0
          git push
